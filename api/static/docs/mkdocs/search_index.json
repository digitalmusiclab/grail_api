{
    "docs": [
        {
            "location": "/", 
            "text": "Purpose\n\n\nThe General Recorded Audio Identity Linker (GRAIL) is a music metadata ID linking API that: verifies and links music metadata IDs by means of a set of strict criteria, confirms linkage consistency using continuous crawling of music-service APIs, and provides ID linkages as a free, publicly available resource.\n\n\nThe motivation of GRAIL is to facilitate research within music by providing as many openly available music-entity linkages as possible. \n\n\nObjectives\n\n\nThe purpose of GRAIL is to:\n\n\n\n\nMaintain transparency by providing detailed documentation of data collection, and validation process\n\n\nCan assign mulitple IDs to a single entity\n\n\nPrioritizes correct, complete, and consistent linkages\n\n\nDoes not depend upon ontologies of existing services\n\n\nIs a free, open-access service for the music research community\n\n\nContinually to searches, and links resources\n\n\n\n\nLinkage Results and Services\n\n\nTo date, more than 30 million tracks, 2.7 million releases (albums), and 28 million artists IDs have been ingested into GRAIL, making it possibly one of the largest open-access music metadata resources available to date.\n\n\n\n\n\n\n\n\nService\n\n\nLinkages\n\n\n\n\n\n\n\n\n\n\nSpotify Track ID\n\n\n17.5M\n\n\n\n\n\n\nEcho Nest Track ID\n\n\n6.5M\n\n\n\n\n\n\nMusicBrainz Track ID\n\n\n800K\n\n\n\n\n\n\nMillion Song Dataset Track ID\n\n\n521K\n\n\n\n\n\n\nMusixMatch Track ID\n\n\n3.8M\n\n\n\n\n\n\nLyricFind Track ID\n\n\n1.5M\n\n\n\n\n\n\n----\n\n\n-----\n\n\n\n\n\n\nSpotify Release ID\n\n\n1.5M\n\n\n\n\n\n\nMusicBrainz Release ID\n\n\n---\n\n\n\n\n\n\nMusicBrainz Release-Group ID\n\n\n---\n\n\n\n\n\n\n----\n\n\n----\n\n\n\n\n\n\nSpotify Artist ID\n\n\n6.6M\n\n\n\n\n\n\nMusicBrainz Artist ID\n\n\n203K\n\n\n\n\n\n\nMusixMatch Artist ID\n\n\n2.1M\n\n\n\n\n\n\nJambase Artist ID\n\n\n860K\n\n\n\n\n\n\nOpenAura Artist ID\n\n\n3.7M\n\n\n\n\n\n\nSeatGeek Artist ID\n\n\n2.8M\n\n\n\n\n\n\nSeatwave Artist ID\n\n\n740K\n\n\n\n\n\n\nLyricFind Artist ID\n\n\n1.5M\n\n\n\n\n\n\nTwitter Artist ID\n\n\n670K\n\n\n\n\n\n\nFacebook Artist ID\n\n\n3.7M\n\n\n\n\n\n\nTumblr Artist ID\n\n\n27K\n\n\n\n\n\n\nFree Music Archive Artist ID\n\n\n240K\n\n\n\n\n\n\n7digital Artist ID\n\n\n5.5M\n\n\n\n\n\n\n\n\nFuture Linkage Projects\n\n\n\n\nSpotify linkage confidence value generation\n\n\nGraceNote GNMID14 public dataset\n\n\nLast.FM track and artist linkages\n\n\nImprove search optimization and methods", 
            "title": "Home"
        }, 
        {
            "location": "/#purpose", 
            "text": "The General Recorded Audio Identity Linker (GRAIL) is a music metadata ID linking API that: verifies and links music metadata IDs by means of a set of strict criteria, confirms linkage consistency using continuous crawling of music-service APIs, and provides ID linkages as a free, publicly available resource.  The motivation of GRAIL is to facilitate research within music by providing as many openly available music-entity linkages as possible.", 
            "title": "Purpose"
        }, 
        {
            "location": "/#objectives", 
            "text": "The purpose of GRAIL is to:   Maintain transparency by providing detailed documentation of data collection, and validation process  Can assign mulitple IDs to a single entity  Prioritizes correct, complete, and consistent linkages  Does not depend upon ontologies of existing services  Is a free, open-access service for the music research community  Continually to searches, and links resources", 
            "title": "Objectives"
        }, 
        {
            "location": "/#linkage-results-and-services", 
            "text": "To date, more than 30 million tracks, 2.7 million releases (albums), and 28 million artists IDs have been ingested into GRAIL, making it possibly one of the largest open-access music metadata resources available to date.     Service  Linkages      Spotify Track ID  17.5M    Echo Nest Track ID  6.5M    MusicBrainz Track ID  800K    Million Song Dataset Track ID  521K    MusixMatch Track ID  3.8M    LyricFind Track ID  1.5M    ----  -----    Spotify Release ID  1.5M    MusicBrainz Release ID  ---    MusicBrainz Release-Group ID  ---    ----  ----    Spotify Artist ID  6.6M    MusicBrainz Artist ID  203K    MusixMatch Artist ID  2.1M    Jambase Artist ID  860K    OpenAura Artist ID  3.7M    SeatGeek Artist ID  2.8M    Seatwave Artist ID  740K    LyricFind Artist ID  1.5M    Twitter Artist ID  670K    Facebook Artist ID  3.7M    Tumblr Artist ID  27K    Free Music Archive Artist ID  240K    7digital Artist ID  5.5M", 
            "title": "Linkage Results and Services"
        }, 
        {
            "location": "/#future-linkage-projects", 
            "text": "Spotify linkage confidence value generation  GraceNote GNMID14 public dataset  Last.FM track and artist linkages  Improve search optimization and methods", 
            "title": "Future Linkage Projects"
        }, 
        {
            "location": "/gettingstarted/", 
            "text": "Registration\n\n\nAPI access requires an API key as part of the request. Keys are issued \nhere\n during the free registration process. Registration requires accepting terms and services, providing an email address, represented institution/organization, and a brief description of intended uses of the API.\n\n\nRate-limits\n\n\nMethods\n\n\nResponse Example\n\n\n{\n    \nquery\n: {\n        \nid\n: 123123123,\n        \nq_namespace\n: \nspotify_artist\n,\n        \nparameters\n: {\n            \nordering\n: \ncreated_at\n,\n            \ninclude\n: [\n                \nid\n, \nconfidence\n, \ncreated_at\n\n            ],\n            \nmin_confidence\n: 0.5,\n            \nr_namespace\n: [\n                \nmusicbrainz\n,\n                \nechonest\n,\n                \nacousticbrainz\n\n            ]\n        }\n    },\n    \nresults\n: {\n        \nmusicbrainz\n: [\n            {\n                \nid\n: 12312321, \n                \nconfidence\n: 0.754,\n                \ncreated_at\n: 2016-09-01\n            }\n        ],\n        \nechonest\n: [],\n        \nacousticbrainz\n: [\n            {\n                \nid\n: 12312312, \n                \nconfidence\n: 0.754,\n                \ncreated_at\n: 2016-09-01\n            },\n            {\n                \nid\n: 1231, \n                \nconfidence\n: 0.754,\n                \ncreated_at\n: 2016-09-01\n            }\n        ]\n    }\n}", 
            "title": "Getting Started"
        }, 
        {
            "location": "/gettingstarted/#registration", 
            "text": "API access requires an API key as part of the request. Keys are issued  here  during the free registration process. Registration requires accepting terms and services, providing an email address, represented institution/organization, and a brief description of intended uses of the API.", 
            "title": "Registration"
        }, 
        {
            "location": "/gettingstarted/#rate-limits", 
            "text": "", 
            "title": "Rate-limits"
        }, 
        {
            "location": "/gettingstarted/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/gettingstarted/#response-example", 
            "text": "{\n     query : {\n         id : 123123123,\n         q_namespace :  spotify_artist ,\n         parameters : {\n             ordering :  created_at ,\n             include : [\n                 id ,  confidence ,  created_at \n            ],\n             min_confidence : 0.5,\n             r_namespace : [\n                 musicbrainz ,\n                 echonest ,\n                 acousticbrainz \n            ]\n        }\n    },\n     results : {\n         musicbrainz : [\n            {\n                 id : 12312321, \n                 confidence : 0.754,\n                 created_at : 2016-09-01\n            }\n        ],\n         echonest : [],\n         acousticbrainz : [\n            {\n                 id : 12312312, \n                 confidence : 0.754,\n                 created_at : 2016-09-01\n            },\n            {\n                 id : 1231, \n                 confidence : 0.754,\n                 created_at : 2016-09-01\n            }\n        ]\n    }\n}", 
            "title": "Response Example"
        }, 
        {
            "location": "/register/", 
            "text": "Terms of Service\nI agree to do no evil and to use these linkages only for research.\n\n\n\n\n\n\n    \nEmail: \n\n\n    \nPassword:", 
            "title": "Register"
        }, 
        {
            "location": "/documentation/", 
            "text": "Registration\n\n\n\n\nNew users must register with an email address to receive an API key. \n\n\nAPI access requires an API key as part of the request. Keys are issued \nhere\n during the free registration process. Registration requires accepting terms and services, providing an email address, represented institution/organization, and a brief description of intended uses of the API.\n\n\n\n\nParameters\n\n\n\n\n13 services are currently linked into GRAIL and listed below. User's can query the API using any of the cooperating services, and request any service in the return. Services, and parameter names include:\n\n\nSearching the API is broken into 2 categories. Searching using an ID or namespace, and restricting results through requirement parameters\n\n\n\n\nID Parameters\n\n\nTracks\n\n\n\n\nSpotify (spotify_track)\n\n\nThe Echo Nest (echonest_track)\n\n\nMusicBrainz (musicbrainz_track)\n\n\nMillion Song Dataset (msd_track)\n\n\nMusixMatch (musixmatch_ww_track)\n\n\nLyricFind (lyricfind_us_track)\n\n\n\n\nAlbums\n\n\n\n\nSpotify (to be included)\n\n\nMusicBrainz (to be included)\n\n\n\n\nArtist\n\n\n\n\nSpotify (spotify_artist)\n\n\nMusicBrainz (musicbrainz_artist)\n\n\nMusixMatch (musixmatch_artist)\n\n\nJambase (jambase_artist)\n\n\nOpenAura (openaura_artist)\n\n\nSeatGeek (seatgeek_artist)\n\n\nSeatwave (seatwave_artist)\n\n\nLyricFind (lyricfind_us_artist)\n\n\nTwitter (twitter_artist)\n\n\nFacebook (facebook_artist)\n\n\nTumblr (tumblr_artist)\n\n\nFree Music Archive (fma_artist)\n\n\n7digital (7digital_us_artist,7digital_uk_artist,7digital_au_artist)\n\n\n\n\nRequirement Parameters\n\n\nTracks\n\n\n\n\nTimestamp of record creation (createdat_track)\n\n\nTimestamp of record update (updatedat_track)\n\n\nMusicBrainz criteria level (musicbrainz_track_criteria)\n\n\nSpotify criteria level (to be included)\n\n\n\n\nAlbums\n\n\n\n\nTimestamp of record creation (to be included)\n\n\nTimestamp of record update (to be included)\n\n\n\n\nArtist\n\n\n\n\nTimestamp of record creation (createdat_artist)\n\n\nTimestamp of record update (updatedat_artist)\n\n\n\n\nRate-limits\n\n\n\n\nGRAIL is limited in funding and resources. Rate-limits are subject to change based on the popularity of the service and our practical restrictions. Currently, users can query once every second.\n\n\n\n\nMethods\n\n\n\n\nUsers can query for tracks using any of the services listed above. Below include a set of example search queries.\n\n\n\n\nSearch Examples\n\n\n\n\nGet all MusicBrainz track IDs linked to a spotify track ID where the criteria linkage was at greater than 3:\n\n\n\n\napi.grail.com/search?spotify_track=SPOTIFY_TRACK\nmusicbrainz_track_criteria\n3\ninc=musicbrainz_track\n'''\n\n* Get all track IDs for a Facebook artist that were updated by a certain date:\n```html\napi.grail.com/search?facebook_artist=FACEBOOK_ARTIST\nupdatedat_criteria\n2016-01-01\n'''\n\n# Current Response Example\nTo be added.\n\n\n# Response In Development Example\n* New response \n\n```json\n{\n    \nquery\n: {\n        \nid\n: 123123123,\n        \nq_namespace\n: \nspotify_artist\n,\n        \nparameters\n: {\n            \nordering\n: \ncreated_at\n,\n            \ninclude\n: [\n                \nid\n, \nconfidence\n, \ncreated_at\n\n            ],\n            \nmin_confidence\n: 0.5,\n            \nr_namespace\n: [\n                \nmusicbrainz\n,\n                \nechonest\n,\n                \nacousticbrainz\n\n            ]\n        }\n    },\n    \nresults\n: {\n        \nmusicbrainz_track\n: [\n            {\n                \nid\n: d935f566-7f02-45a1-9d33-2c3afd106473, \n                \nconfidence\n: 1,\n                \ncreated_at\n: 2016-09-01\n            }\n        ],\n        \nfacebook_artist\n: [],\n        \nspotify_track\n: [\n            {\n                \nid\n: 5oPK2qblqhhxl55i7t5MBT, \n                \nconfidence\n: 0.754,\n                \ncreated_at\n: 2016-09-01\n            },\n            {\n                \nid\n: 1KtIJtoeHUhLab8BLiBpct, \n                \nconfidence\n: 0.754,\n                \ncreated_at\n: 2016-09-01\n            }\n        ]\n    }\n}", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#registration", 
            "text": "New users must register with an email address to receive an API key.   API access requires an API key as part of the request. Keys are issued  here  during the free registration process. Registration requires accepting terms and services, providing an email address, represented institution/organization, and a brief description of intended uses of the API.", 
            "title": "Registration"
        }, 
        {
            "location": "/documentation/#parameters", 
            "text": "13 services are currently linked into GRAIL and listed below. User's can query the API using any of the cooperating services, and request any service in the return. Services, and parameter names include:  Searching the API is broken into 2 categories. Searching using an ID or namespace, and restricting results through requirement parameters", 
            "title": "Parameters"
        }, 
        {
            "location": "/documentation/#id-parameters", 
            "text": "", 
            "title": "ID Parameters"
        }, 
        {
            "location": "/documentation/#tracks", 
            "text": "Spotify (spotify_track)  The Echo Nest (echonest_track)  MusicBrainz (musicbrainz_track)  Million Song Dataset (msd_track)  MusixMatch (musixmatch_ww_track)  LyricFind (lyricfind_us_track)", 
            "title": "Tracks"
        }, 
        {
            "location": "/documentation/#albums", 
            "text": "Spotify (to be included)  MusicBrainz (to be included)", 
            "title": "Albums"
        }, 
        {
            "location": "/documentation/#artist", 
            "text": "Spotify (spotify_artist)  MusicBrainz (musicbrainz_artist)  MusixMatch (musixmatch_artist)  Jambase (jambase_artist)  OpenAura (openaura_artist)  SeatGeek (seatgeek_artist)  Seatwave (seatwave_artist)  LyricFind (lyricfind_us_artist)  Twitter (twitter_artist)  Facebook (facebook_artist)  Tumblr (tumblr_artist)  Free Music Archive (fma_artist)  7digital (7digital_us_artist,7digital_uk_artist,7digital_au_artist)", 
            "title": "Artist"
        }, 
        {
            "location": "/documentation/#requirement-parameters", 
            "text": "", 
            "title": "Requirement Parameters"
        }, 
        {
            "location": "/documentation/#tracks_1", 
            "text": "Timestamp of record creation (createdat_track)  Timestamp of record update (updatedat_track)  MusicBrainz criteria level (musicbrainz_track_criteria)  Spotify criteria level (to be included)", 
            "title": "Tracks"
        }, 
        {
            "location": "/documentation/#albums_1", 
            "text": "Timestamp of record creation (to be included)  Timestamp of record update (to be included)", 
            "title": "Albums"
        }, 
        {
            "location": "/documentation/#artist_1", 
            "text": "Timestamp of record creation (createdat_artist)  Timestamp of record update (updatedat_artist)", 
            "title": "Artist"
        }, 
        {
            "location": "/documentation/#rate-limits", 
            "text": "GRAIL is limited in funding and resources. Rate-limits are subject to change based on the popularity of the service and our practical restrictions. Currently, users can query once every second.", 
            "title": "Rate-limits"
        }, 
        {
            "location": "/documentation/#methods", 
            "text": "Users can query for tracks using any of the services listed above. Below include a set of example search queries.", 
            "title": "Methods"
        }, 
        {
            "location": "/documentation/#search-examples", 
            "text": "Get all MusicBrainz track IDs linked to a spotify track ID where the criteria linkage was at greater than 3:   api.grail.com/search?spotify_track=SPOTIFY_TRACK musicbrainz_track_criteria 3 inc=musicbrainz_track\n'''\n\n* Get all track IDs for a Facebook artist that were updated by a certain date:\n```html\napi.grail.com/search?facebook_artist=FACEBOOK_ARTIST updatedat_criteria 2016-01-01\n'''\n\n# Current Response Example\nTo be added.\n\n\n# Response In Development Example\n* New response \n\n```json\n{\n     query : {\n         id : 123123123,\n         q_namespace :  spotify_artist ,\n         parameters : {\n             ordering :  created_at ,\n             include : [\n                 id ,  confidence ,  created_at \n            ],\n             min_confidence : 0.5,\n             r_namespace : [\n                 musicbrainz ,\n                 echonest ,\n                 acousticbrainz \n            ]\n        }\n    },\n     results : {\n         musicbrainz_track : [\n            {\n                 id : d935f566-7f02-45a1-9d33-2c3afd106473, \n                 confidence : 1,\n                 created_at : 2016-09-01\n            }\n        ],\n         facebook_artist : [],\n         spotify_track : [\n            {\n                 id : 5oPK2qblqhhxl55i7t5MBT, \n                 confidence : 0.754,\n                 created_at : 2016-09-01\n            },\n            {\n                 id : 1KtIJtoeHUhLab8BLiBpct, \n                 confidence : 0.754,\n                 created_at : 2016-09-01\n            }\n        ]\n    }\n}", 
            "title": "Search Examples"
        }, 
        {
            "location": "/linkage/", 
            "text": "Linkage Process\n\n\nNokia Music to Spotify\n\n\n\n\n\n\n27 million tracks linked to track-level catalog information, including international standard recording codes (ISRCs), were made available to the Digital Music Lab as part of a data-sharing agreement with Nokia Music. The unique mapping of ISRCs to Nokia Music is used as a starting point for GRAIL. \n\n\n\n\n\n\nSpotify track IDs were collected from the Spotify API using \n```python\nx='https://api.spotify.com/v1/tracks/?isrc:ISRC'\n'''\n\n\n\n\n\n\n17,713,247 Spotify tracks were linked to ISRCs using this method\n\n\n\n\n\n\nSpotify to The Echo Nest\n\n\n\n\nPrior to The Echo Nest's deprecation, the 17.7 million linked Spotify track IDs were used to query artist-level identifiers available from the Rosetta Stone project.\n\n\n\n\nSpotify tracks were used to query The Echo Nest API using the method:\n```html\nhttp://developer.echonest.com/api/v4/song/search?api_key=FILDTEOIK2HBORODV\ntrack_id=spotify:SPOTIFY_TRACK\nformat=json\n'''\n\n\n\n\n\n\n11,205,282 of the 17.7 million tracks returned artist, and track ID information from the query.  \n\n\n\n\n12 artist-level IDs were linked into GRAIL. Available for IDs for artists vary, for a summary of available IDs see \ndocumentation\n\n\n\n\nMixRadio to MusicBrainz\n\n\n\n\nSpotify and Nokia Music album metadata was used to query MusicBrainz \nsearch server\n.\n\n\nIn order to create track-level MusicBrainz linkages, MusicBrainz release metadata was compared to Nokia Music release metadata.\n\n\nTracks must satisfy 1 of 4 levels of reducing matching criteria in order to be linked into GRAIL. Criteria 1 represents the strongest match, 4 represents the weakest. For a detailed description of the MixRadio to MusicBrainz matching procedure, see \ncriteria\n\n\nMethods that restrict responses to only include tracks which meet specific criteria are \navailable\n\n\n\n\nMixRadio to Million Song Dataset\n\n\n\n\nTo be included.", 
            "title": "Linkage process"
        }, 
        {
            "location": "/linkage/#linkage-process", 
            "text": "", 
            "title": "Linkage Process"
        }, 
        {
            "location": "/linkage/#nokia-music-to-spotify", 
            "text": "27 million tracks linked to track-level catalog information, including international standard recording codes (ISRCs), were made available to the Digital Music Lab as part of a data-sharing agreement with Nokia Music. The unique mapping of ISRCs to Nokia Music is used as a starting point for GRAIL.     Spotify track IDs were collected from the Spotify API using \n```python\nx='https://api.spotify.com/v1/tracks/?isrc:ISRC'\n'''    17,713,247 Spotify tracks were linked to ISRCs using this method", 
            "title": "Nokia Music to Spotify"
        }, 
        {
            "location": "/linkage/#spotify-to-the-echo-nest", 
            "text": "Prior to The Echo Nest's deprecation, the 17.7 million linked Spotify track IDs were used to query artist-level identifiers available from the Rosetta Stone project.   Spotify tracks were used to query The Echo Nest API using the method:\n```html\nhttp://developer.echonest.com/api/v4/song/search?api_key=FILDTEOIK2HBORODV track_id=spotify:SPOTIFY_TRACK format=json\n'''    11,205,282 of the 17.7 million tracks returned artist, and track ID information from the query.     12 artist-level IDs were linked into GRAIL. Available for IDs for artists vary, for a summary of available IDs see  documentation", 
            "title": "Spotify to The Echo Nest"
        }, 
        {
            "location": "/linkage/#mixradio-to-musicbrainz", 
            "text": "Spotify and Nokia Music album metadata was used to query MusicBrainz  search server .  In order to create track-level MusicBrainz linkages, MusicBrainz release metadata was compared to Nokia Music release metadata.  Tracks must satisfy 1 of 4 levels of reducing matching criteria in order to be linked into GRAIL. Criteria 1 represents the strongest match, 4 represents the weakest. For a detailed description of the MixRadio to MusicBrainz matching procedure, see  criteria  Methods that restrict responses to only include tracks which meet specific criteria are  available", 
            "title": "MixRadio to MusicBrainz"
        }, 
        {
            "location": "/linkage/#mixradio-to-million-song-dataset", 
            "text": "To be included.", 
            "title": "MixRadio to Million Song Dataset"
        }, 
        {
            "location": "/criteria/", 
            "text": "Criteria Description\n\n\nNokia Music to Spotify\n\n\nTo be included: The Spotify API is queried at the track level using ISRCs. Track names are compared between Nokia Music and Spotify. Strings are compared using the SequenceMatcher function of Python's difflib package.  String comparisons's are scored as a ratio betwen 0.0-1.0. Exact string matches are scored as 1.0. A score of 0.5 means that 50% of the characters are shared between Nokia Music and MixRadio track titles.\n\n\nNokia Music to MusicBrainz\n\n\n\n\nTracks are matched at the album level.  All criteria require that the Nokia Music release and the MusicBrainz release maintain cardinality (agreement regarding total tracks). Criteria 1 requires Nokia Music and MusicBrainz to be in maintain exact string matches and track ordering. Requirements loosen as criteria fail; criteria 4 requires that all tracks must be present across both releases, ignoring track ordering, and passes the fuzzy string matching procedure described above. \n\n\n\n\n\n\n\n\n\n\nCriterion\n\n\nCardinality\n\n\nOrdering\n\n\nString Match\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n----\n\n\n----\n\n\n----\n\n\n----\n\n\n\n\n\n\n2\n\n\n1\n\n\n0\n\n\n1\n\n\n\n\n\n\n----\n\n\n----\n\n\n----\n\n\n----\n\n\n\n\n\n\n3\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n----\n\n\n----\n\n\n----\n\n\n----\n\n\n\n\n\n\n4\n\n\n1\n\n\n0\n\n\n0\n\n\n\n\n\n\n----\n\n\n----\n\n\n----\n\n\n----\n\n\n\n\n\n\n* Matching criteria table for MusicBrainz linkage process. Cardinality and ordering with a value of 1 represents True. String Match values of 1 represent exact (case insenstive) matches, 0 represents fuzzy string matching.", 
            "title": "Criteria Description"
        }, 
        {
            "location": "/criteria/#criteria-description", 
            "text": "", 
            "title": "Criteria Description"
        }, 
        {
            "location": "/criteria/#nokia-music-to-spotify", 
            "text": "To be included: The Spotify API is queried at the track level using ISRCs. Track names are compared between Nokia Music and Spotify. Strings are compared using the SequenceMatcher function of Python's difflib package.  String comparisons's are scored as a ratio betwen 0.0-1.0. Exact string matches are scored as 1.0. A score of 0.5 means that 50% of the characters are shared between Nokia Music and MixRadio track titles.", 
            "title": "Nokia Music to Spotify"
        }, 
        {
            "location": "/criteria/#nokia-music-to-musicbrainz", 
            "text": "Tracks are matched at the album level.  All criteria require that the Nokia Music release and the MusicBrainz release maintain cardinality (agreement regarding total tracks). Criteria 1 requires Nokia Music and MusicBrainz to be in maintain exact string matches and track ordering. Requirements loosen as criteria fail; criteria 4 requires that all tracks must be present across both releases, ignoring track ordering, and passes the fuzzy string matching procedure described above.       Criterion  Cardinality  Ordering  String Match      1  1  1  1    ----  ----  ----  ----    2  1  0  1    ----  ----  ----  ----    3  1  1  0    ----  ----  ----  ----    4  1  0  0    ----  ----  ----  ----    * Matching criteria table for MusicBrainz linkage process. Cardinality and ordering with a value of 1 represents True. String Match values of 1 represent exact (case insenstive) matches, 0 represents fuzzy string matching.", 
            "title": "Nokia Music to MusicBrainz"
        }, 
        {
            "location": "/about/", 
            "text": "Research using GRAIL\n\n\n\n\nLeaky Features (in-review).\n\n\nLate breaking demos.\n\n\nAnalysis of user behaviour patterns with respect to acoustic feature preferences (forthcoming).\n\n\n\n\nTroubleshooting\n\n\n\n\nTo report an issue with data integrity, API services, or to suggest new features, please post on our GitHub.\n\n\nPlease refer to the \ndocumentation\n, and FAQs pages before inquiring.\n\n\n\n\nContacts\n\n\n\n\nGRAIL actively encourages collaboration for this project. If company, or research team would like to integrate your dataset into GRAIL, please contact baronem@mcmaster.ca.\n\n\n\n\nDisclaimer\n\n\nGRAIL was developed for academic research of digital music. Please see terms and conditions or the FAQ for details.", 
            "title": "About"
        }, 
        {
            "location": "/about/#research-using-grail", 
            "text": "Leaky Features (in-review).  Late breaking demos.  Analysis of user behaviour patterns with respect to acoustic feature preferences (forthcoming).", 
            "title": "Research using GRAIL"
        }, 
        {
            "location": "/about/#troubleshooting", 
            "text": "To report an issue with data integrity, API services, or to suggest new features, please post on our GitHub.  Please refer to the  documentation , and FAQs pages before inquiring.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/about/#contacts", 
            "text": "GRAIL actively encourages collaboration for this project. If company, or research team would like to integrate your dataset into GRAIL, please contact baronem@mcmaster.ca.", 
            "title": "Contacts"
        }, 
        {
            "location": "/about/#disclaimer", 
            "text": "GRAIL was developed for academic research of digital music. Please see terms and conditions or the FAQ for details.", 
            "title": "Disclaimer"
        }
    ]
}